// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum DepartmentType {
  BE
  DP
}

enum Role {
  admin
  member
}

model PostTag {
  id        String    @id @default(cuid())
  title     String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  parentId  String?
  parent    PostTag?  @relation("ParentChildren", fields: [parentId], references: [id])
  children  PostTag[] @relation("ParentChildren")
  posts     Post[]

  @@map("post_tags")
}

model Post {
  id          String    @id @default(cuid())
  authorId    String
  title       String
  metaTitle   String
  slug        String
  content     String
  rawHtml     String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [authorId], references: [id])
  tags        PostTag[]

  @@unique([authorId, slug])
  @@map("posts")
}

// Define the department model
model Department {
  id          String         @id @default(cuid())
  name        String
  acronym     String
  image       String?
  description String?
  programs    String[]
  type        DepartmentType
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  users       User[]

  @@unique([type, acronym])
  @@map("departments")
}

model Period {
  id   String @id @default(cuid())
  name String @unique
  year Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("periods")
}

model SocialMedia {
  userId   String
  name     String
  username String
  url      String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, name, username])
  @@map("social_medias")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  username      String?       @unique
  bio           String?
  position      String?
  periods       String[]
  role          Role          @default(member)
  lastLoginAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  departmentId  String?
  department    Department?   @relation(fields: [departmentId], references: [id])
  posts         Post[]
  socialMedia   SocialMedia[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
